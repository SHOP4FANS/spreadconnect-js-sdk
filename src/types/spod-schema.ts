/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/authentication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * REST API Authentication Info
         * @description This resource could be used, to test your authentication and get some basic information about your authentication.
         */
        get: operations["authentication info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/articles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all articles
         * @description This resource could be used, to get all created products for your point of sale.
         */
        get: operations["getArticles"];
        put?: never;
        /**
         * Create a single article
         * @description This resource could be used to create an article for your point of sale.
         *
         *     In order to get the available products that we offer, see the 'Product Types' section. There you can also find the
         *     necessary ids required to build the payload.
         *
         *     In the variants array, you can enable the sizes and colours of your product.
         *
         *     In the configuration array, you can place designs via url. The image must be in PNG format and under 10 MB.
         *     At this moment, the designs will be scaled as big as possible, keeping in mind the resolution of the chosen design
         *     and the limits of the print area.
         *
         *     The external id fields can be used for identifying articles and variants. They are optional, but if they are present
         *     they are validated as being not duplicates, in the article context
         *
         */
        post: operations["createArticle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/articles/{articleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single article
         * @description get a specific article with all details
         */
        get: operations["getArticle"];
        put?: never;
        post?: never;
        /**
         * Delete a single article
         * @description This resource could be used, to delete a product from the point of sale.
         */
        delete: operations["deleteArticle"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an order
         * @description Place a new order in the API. You can choose the simple way and set the shipping type and the confirmed state in one request. Or you can create the order first and set the shipping type and the confirmed state later. It is also possible to mix both ways and set the shipping type direct and confirm later.
         */
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single order
         * @description get a specific order with all details
         */
        get: operations["getOrder"];
        /**
         * Update order
         * @description update order
         */
        put: operations["updateOrder"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/shippingTypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available shipping types
         * @description get a list with all possible shipping types for this order
         */
        get: operations["getShippingTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/shippingType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set shipping type
         * @description Set a specific shipping type
         */
        post: operations["setShippingType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm order
         * @description Try to confirm an order. To do it, it's necessary to set a shipping type before.
         */
        post: operations["confirmOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel order
         * @description Try to cancel an order. It is not possible to cancel orders that have already been sent or are already in production internally.
         */
        post: operations["cancelOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/shipments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get shipments
         * @description get a list with all shipments for this order
         */
        get: operations["getShipments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all subscriptions
         * @description get all subscriptions
         */
        get: operations["getSubscriptions"];
        put?: never;
        /**
         * Create a new subscription
         * @description add a new subscription
         */
        post: operations["createSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a subscription
         * @description delete a subscription
         */
        delete: operations["deleteSubscription"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/simulate/order-cancelled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate Order Cancelled Event
         * @description Simulates an order cancelled event
         */
        post: operations["simulateOrderCancelledEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/simulate/order-processed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate Order Processed Event
         * @description Simulates an order processed event
         */
        post: operations["simulateOrderProcessedEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/simulate/shipment-sent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate Shipment Sent Event
         * @description Simulates a shipment sent event
         */
        post: operations["simulateShipmentSentEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/productTypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available product types
         * @description get available product types
         */
        get: operations["getProductTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/productTypes/{productTypeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single product type
         * @description get a specific product type with all details
         */
        get: operations["getProductType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/productTypes/{productTypeId}/size-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the size chart for a product type
         * @description Get the size chart for a product type. It consists of an image of a simplified model of the product, with names of measurements ("A", "B", etc), and the values of the measurements, in both inches and mm, for each of products sizes.
         */
        get: operations["getProductTypeSizeChart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available stocks for all variants
         * @description Get available stocks for all variants from the point of sale
         *
         *     The result is a map of variant's SKUs associated with their stock amount.
         *
         */
        get: operations["getStocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/{sku}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available stock for a certain variant
         * @description Get available stocks for a certain variant, by its SKU
         */
        get: operations["getStock"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Article: {
            readonly id?: number;
            title?: string;
            description?: string;
            /** @description product variants */
            variants?: {
                /** @description spreadconnect variant id */
                id?: number;
                /** @description sprd product type id */
                productTypeId?: number;
                /** @description sprd product type name */
                productTypeName?: string;
                /** @description sprd product id */
                productId?: number;
                /** @description sprd appearance id */
                appearanceId?: number;
                /** @description sprd appearance name */
                appearanceName?: string;
                /** @description sprd appearance color value */
                appearanceColorValue?: string;
                /** @description sprd size id */
                sizeId?: number;
                /** @description sprd size name */
                sizeName?: string;
                /**
                 * @description stock keeping unit id from spreadconnect
                 * @example P1026247707A12S5
                 */
                sku?: string;
                /**
                 * @description final price for the customer
                 * @example 21.56
                 */
                d2cPrice?: number;
                /** @description image id */
                imageIds?: number[];
            }[];
            /** @description product variants */
            images?: {
                /**
                 * @description spreadconnect image id
                 * @example 560860288
                 */
                id?: number;
                /** @description sprd product id */
                productId?: number;
                /** @description sprd appearance id */
                appearanceId?: number;
                /** @description sprd appearance name */
                appearanceName?: string;
                /** @description sprd view id */
                perspective?: string;
                /** @description URL to get the product image.
                 *     There are different optional parameters which you have to add by your own:
                 *     &width = image width
                 *     &height = image height
                 *      */
                imageUrl?: string;
            }[];
        };
        ArticleCreation: {
            title: string;
            description: string;
            /** @description product variants */
            variants: {
                /** @description sprd product type id */
                productTypeId: number;
                /** @description sprd appearance id */
                appearanceId: number;
                /** @description sprd size id */
                sizeId: number;
                /**
                 * @description final price for the customer
                 * @example 21.56
                 */
                d2cPrice?: number;
                /**
                 * @description optional id that can be used for identifying the article variant - validated for UUID v4
                 * @example 20354d7a-e4fe-47af-8ff6-187bca92f3f9
                 */
                externalId?: string;
            }[];
            /** @description product */
            configurations: {
                image: {
                    url: string;
                };
                /** @enum {string} */
                view: "FRONT" | "BACK" | "LEFT" | "RIGHT" | "HOOD_LEFT" | "HOOD_RIGHT";
            }[];
            /**
             * @description optional id that can be used for identifying the article - validated for UUID v4
             * @example 20354d7a-e4fe-47af-8ff6-187bca92f3f9
             */
            externalId?: string;
        };
        /** @description customer price */
        CustomerPrice: {
            /**
             * @description total amount, with vat or sales tax
             * @example 21.56
             */
            amount: number;
            /**
             * @description currency iso code
             * @example USD
             */
            currency?: string;
        };
        CreateOrderItem: {
            /**
             * @description stock keeping unit id from spreadconnect
             * @example P1026247707A12S5
             */
            sku: string;
            /**
             * @description quantity of items
             * @default 1
             */
            quantity: number;
            /**
             * @description external order item reference from merchant (you)
             * @example 12810092145
             */
            externalOrderItemReference?: string;
            /** @description customer price for item with quantity n */
            customerPrice: components["schemas"]["CustomerPrice"];
        };
        /** @description physical mailing address */
        Address: {
            /**
             * @description company name
             * @example Example Ltd.
             */
            company?: string;
            /**
             * @description first name
             * @example Joshua
             */
            firstName?: string;
            /**
             * @description last name
             * @example Anderson
             */
            lastName: string;
            /**
             * @description street
             * @example 1572 Roseytown Rd
             */
            street: string;
            /**
             * @description street annex, optional
             * @example 2nd Floor
             */
            streetAnnex?: string;
            /**
             * @description city name
             * @example Greensburg
             */
            city: string;
            /**
             * @description country code, is the ISO 3166-1 alpha-2 code of the country to deliver to, e.g. 'DE' or 'US'.
             * @example US
             */
            country: string;
            /**
             * @description state code, is the country-specific 2-letter upper-case, e.g. AL for Alabama in the USA
             *     This field is required when delivering to the USA or Canada
             *
             * @example AL
             */
            state?: string;
            /**
             * @description zip code, for some countries optional
             * @example 15601
             */
            zipCode: string;
        };
        /** @description payload for a new order */
        CreateOrder: {
            /** @description order items */
            orderItems: components["schemas"]["CreateOrderItem"][];
            /** @description shipping informations */
            shipping: {
                /** @description shipping address */
                address: components["schemas"]["Address"];
                /** @description return to sender (RTS) address */
                fromAddress?: components["schemas"]["Address"];
                /**
                 * @description preferred shipping type
                 * @enum {string}
                 */
                preferredType?: "STANDARD" | "PREMIUM" | "EXPRESS";
                /** @description customer price for shipping */
                customerPrice: components["schemas"]["CustomerPrice"];
            };
            /** @description billing address, if not set, we will use the shipping address */
            billingAddress?: components["schemas"]["Address"];
            /**
             * @description Phone used for the communication with the customer.
             * @example +49 1520 1234567
             */
            phone: string;
            /**
             * @description Email used for the communication with the customer.
             * @example joshua.anders@protonmail.ch
             */
            email: string;
            /**
             * @description external order reference from merchant (you)
             * @example 1722995712
             */
            externalOrderReference: string;
            /**
             * @description external order name from merchant (you)
             * @example ORDER-12
             */
            externalOrderName?: string;
            /**
             * @description order state
             * @example CONFIRMED
             * @enum {string}
             */
            state?: "NEW" | "CONFIRMED";
            /**
             * @description tax type, salestax or vat
             * @enum {string}
             */
            customerTaxType?: "SALESTAX" | "VAT" | "NOT_TAXABLE";
            /** @description optional origin field */
            origin?: string;
        };
        /** @description price */
        Price: {
            /**
             * @description total amount, with vat or sales tax
             * @example 21.56
             */
            amount: number;
            /**
             * @description included vat rate in percent, only for tax type VAT
             * @example 19
             */
            taxRate?: number;
            /**
             * @description included sales tax, only for tax type SALETAX
             * @example 12.45
             */
            taxAmount?: number;
            /**
             * @description currency iso code
             * @example USD
             */
            currency?: string;
        };
        GetOrderItem: {
            /**
             * @description spreadconnect order item reference
             * @example 55000001
             */
            orderItemReference?: number;
            /**
             * @description external order item reference from merchant (you)
             * @example 12810092145
             */
            externalOrderItemReference?: string;
            /**
             * @description order item state
             * @enum {string}
             */
            state?: "NEW" | "CHECKED" | "CANCELLED" | "PRODUCTION_ISSUE" | "IN_PRODUCTION" | "SENT";
            /**
             * @description stock keeping unit id from spreadconnect
             * @example P1026247707A12S5
             */
            sku?: string;
            /**
             * @description item quantity
             * @default 1
             */
            quantity: number;
            /** @description item price for item with quantity n */
            price?: components["schemas"]["Price"];
            /** @description customer price for item with quantity n */
            customerPrice?: components["schemas"]["CustomerPrice"];
        };
        /** @description shipping type with id, name and description */
        ShippingType: {
            /**
             * @description shipping type id, needed for set shipping type
             * @example 29
             */
            id?: string;
            /**
             * @description shipping company such as DHL, UPS, DPD, USPS, DHL Express, FedEx, Post AT, Deutsche Post
             * @example DHL
             */
            company?: string;
            /** @example International Standard */
            name?: string;
            /** @example No tracking provided. May be subject to import taxes, customs, and duties upon delivery. */
            description?: string;
        };
        GetOrder: {
            /**
             * @description order id from spreadconnect
             * @example 123
             */
            id?: number;
            /**
             * @description order reference from spreadconnect, can be changed after order updates
             * @example 5550000
             */
            orderReference?: number;
            /**
             * @description external order reference from merchant (you)
             * @example 1722995712
             */
            externalOrderReference?: string;
            /**
             * @description external order name from merchant (you)
             * @example ORDER-12
             */
            externalOrderName?: string;
            /**
             * @description order state
             * @enum {string}
             */
            state?: "NEW" | "CONFIRMED" | "PROCESSED" | "CANCELLED";
            /** @description order items */
            orderItems?: components["schemas"]["GetOrderItem"][];
            /** @description shipping information */
            shipping?: {
                /** @description shipping address */
                address?: components["schemas"]["Address"];
                /** @description return to sender (RTS) address */
                fromAddress?: components["schemas"]["Address"];
                /** @description shipping type */
                type?: components["schemas"]["ShippingType"];
                /** @description shipping price */
                price?: components["schemas"]["Price"];
                /** @description shipping price for your customer */
                customerPrice?: components["schemas"]["CustomerPrice"];
            };
            /** @description billing address */
            billingAddress?: components["schemas"]["Address"];
            /**
             * @description Phone used for the communication with the customer.
             * @example +49 1520 1234567
             */
            phone?: string;
            /**
             * @description Email used for the communication with the customer.
             * @example joshua.anders@protonmail.ch
             */
            email?: string;
            /** @description price for the complete order */
            price?: components["schemas"]["Price"];
            /**
             * @description tax type, salestax or vat
             * @enum {string}
             */
            taxType?: "SALESTAX" | "VAT" | "NOT_TAXABLE";
            /**
             * @description tax type, salestax or vat
             * @enum {string}
             */
            customerTaxType?: "SALESTAX" | "VAT" | "NOT_TAXABLE";
        };
        /** @description error response */
        ErrorResponse: {
            /** @description spreadconnect order id, can be null, if order not created */
            orderId?: number;
            /** @description error reason */
            reason?: string;
        };
        /** @description shipping type with price */
        AvailableShippingType: {
            price?: components["schemas"]["Price"];
        } & components["schemas"]["ShippingType"];
        Shipment: {
            /** @description shipment id */
            id?: number;
            /** @description spreadconnect order id */
            orderId?: number;
            /** @description order reference from spreadconnect, can be changed after order updates */
            orderReference?: number;
            /** @description external order reference from merchant (you) */
            externalOrderReference?: string;
            /** @description spreadconnect order item references */
            orderItemReferences?: number[];
            /** @description external order item references */
            externalOrderItemReferences?: string[];
            /** @description shipment shipping information */
            shipping?: {
                address?: components["schemas"]["Address"];
                type?: components["schemas"]["ShippingType"];
                price?: components["schemas"]["Price"];
            };
            /** @description tracking information for shipment */
            tracking?: {
                /** @description tracking code */
                code?: string;
                /** @description tracking url */
                url?: string;
            }[];
            /** @description ready for shipment date */
            closedDate?: string;
            /** @description sent date */
            sentDate?: string;
        };
        Subscription: {
            readonly id?: number;
            /** @enum {string} */
            eventType: "Shipment.sent" | "Order.cancelled" | "Order.processed" | "Order.needs-action" | "Article.added" | "Article.updated" | "Article.removed";
            url?: string;
            secret?: string;
        };
        /** @description null */
        ProductTypes: {
            id?: string;
            customerName?: string;
            customerDescription?: string;
            merchantName?: string;
            merchantDescription?: string;
            sizes?: {
                id?: string;
                name?: string;
            }[];
            brand?: string;
            appearances?: {
                id?: string;
                name?: string;
            }[];
            views?: ("FRONT" | "BACK" | "LEFT" | "RIGHT" | "HOOD_LEFT" | "HOOD_RIGHT")[];
            price?: number;
            currency?: string;
        };
        /** @description null */
        SizeChart: {
            /** @description At this url you will find an image with a basic representation of the product, and the names of the measurements ("A", "B", etc) */
            sizeImageUrl?: string;
            sizes?: {
                /** @description Id of the size */
                sizeId?: string;
                /** @description Name of the size, for example "S" or "XL" */
                name?: string;
                measurements?: {
                    /** @description the letter which is on the image found at sizeImageUrl */
                    name?: string;
                    /** @description the value of the measurement in mm */
                    valueMm?: number;
                    /** @description the value of the measurement in inch */
                    valueInch?: number;
                }[];
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "authentication info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description merchant identifier */
                        merchantId?: number;
                        /** @description point of sale identifier */
                        pointOfSaleId?: number;
                        /** @description point of sale name */
                        pointOfSaleName?: string;
                        /** @description point of sale type */
                        pointOfSaleType?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArticles: {
        parameters: {
            query?: {
                /** @description *General pagination option*: defines the number of results to show
                 *      */
                limit?: number;
                /** @description define the offset to be queried. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description items */
                        items?: components["schemas"]["Article"][];
                        /** @default 5 */
                        count: number;
                        /** @default 100 */
                        limit: number;
                        offset?: number;
                    };
                };
            };
        };
    };
    createArticle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ArticleCreation"];
            };
        };
        responses: {
            /** @description OK */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    getArticle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description article id */
                articleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Article"];
                };
            };
            /** @description Article not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description There is a problem with this article. Check the article in your Spreadconnect account for more information. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteArticle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description articleId */
                articleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrder"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrder"];
                };
            };
            /** @description Order payload invalid */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description spreadconnect order id */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrder"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description spreadconnect order id */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrder"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateOrder"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order payload invalid */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getShippingTypes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description spreadconnect order id */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailableShippingType"][];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setShippingType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description spreadconnect order id */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example 29 */
                    id?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order or Shipping Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    confirmOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description spreadconnect order id */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order couldn't be confirmed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description spreadconnect order id */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order could not be cancelled */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getShipments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description spreadconnect order id */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Shipment"][];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSubscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subscription"][];
                };
            };
        };
    };
    createSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Subscription"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description subscription id */
                subscriptionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    simulateOrderCancelledEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "*/*"?: never;
            };
        };
        responses: never;
    };
    simulateOrderProcessedEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "*/*"?: never;
            };
        };
        responses: never;
    };
    simulateShipmentSentEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "*/*"?: never;
            };
        };
        responses: never;
    };
    getProductTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description items */
                        items?: components["schemas"]["ProductTypes"][];
                    };
                };
            };
        };
    };
    getProductType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description product type id */
                productTypeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductTypes"];
                };
            };
            /** @description Product type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProductTypeSizeChart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description product type id */
                productTypeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SizeChart"];
                };
            };
            /** @description Product type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStocks: {
        parameters: {
            query?: {
                /** @description *General pagination option*: defines the number of results to show
                 *      */
                limit?: number;
                /** @description define the offset to be queried. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description stock amount
                         * @example {
                         *       "1059582691-P815A92S89": 256
                         *     }
                         */
                        items?: {
                            [key: string]: number;
                        };
                        /** @default 5 */
                        count: number;
                        /** @default 100 */
                        limit: number;
                        offset?: number;
                    };
                };
            };
        };
    };
    getStock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description SKU of the variant */
                sku: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Variant with given SKU not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
