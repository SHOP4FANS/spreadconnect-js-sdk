// These tests were generated by AI.

import { Spreadconnect } from "../spreadconnect";
import { HttpClient } from "../http/http-client.js";
import { ArticlesApi } from "../api/articles-api.js";
import { OrdersApi } from "../api/orders-api.js";
import { SubscriptionsApi } from "../api/subscriptions-api.js";
import { ProductTypesApi } from "../api/product-types-api.js";
import { StocksApi } from "../api/stocks-api.js";
import { DesignsApi } from "../api/designs-api.js";

jest.mock("../http/http-client.js");
jest.mock("../api/articles-api.js");
jest.mock("../api/orders-api.js");
jest.mock("../api/subscriptions-api.js");
jest.mock("../api/product-types-api.js");
jest.mock("../api/stocks-api.js");
jest.mock("../api/designs-api.js");

describe("Spreadconnect", () => {
  const baseUrl = "https://api.example.com";
  const token = "test-token";

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("should create HttpClient with correct arguments", () => {
    new Spreadconnect({ baseUrl, token });

    expect(HttpClient).toHaveBeenCalledTimes(1);
    expect(HttpClient).toHaveBeenCalledWith(baseUrl, token);
  });

  it("should initialize all API classes with the same HttpClient instance", () => {
    const fakeClient = { id: "mock-client" };
    (HttpClient as jest.Mock).mockReturnValue(fakeClient);

    const spreadconnect = new Spreadconnect({ baseUrl, token });

    expect(ArticlesApi).toHaveBeenCalledWith(fakeClient);
    expect(OrdersApi).toHaveBeenCalledWith(fakeClient);
    expect(SubscriptionsApi).toHaveBeenCalledWith(fakeClient);
    expect(ProductTypesApi).toHaveBeenCalledWith(fakeClient);
    expect(StocksApi).toHaveBeenCalledWith(fakeClient);
    expect(DesignsApi).toHaveBeenCalledWith(fakeClient);

    expect(spreadconnect.articles).toBeInstanceOf(ArticlesApi);
    expect(spreadconnect.orders).toBeInstanceOf(OrdersApi);
    expect(spreadconnect.subscriptions).toBeInstanceOf(SubscriptionsApi);
    expect(spreadconnect.productTypes).toBeInstanceOf(ProductTypesApi);
    expect(spreadconnect.stocks).toBeInstanceOf(StocksApi);
    expect(spreadconnect.designs).toBeInstanceOf(DesignsApi);
  });

  it("should store API instances on the class", () => {
    const spreadconnect = new Spreadconnect({ baseUrl, token });

    expect(spreadconnect).toHaveProperty("articles");
    expect(spreadconnect).toHaveProperty("orders");
    expect(spreadconnect).toHaveProperty("subscriptions");
    expect(spreadconnect).toHaveProperty("productTypes");
    expect(spreadconnect).toHaveProperty("stocks");
    expect(spreadconnect).toHaveProperty("designs");
  });
});
